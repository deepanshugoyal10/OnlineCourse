{
	"topic":"Basics of JAVA",
	"intro":"<div> <h2>Java Programming Basics</h2> <p>    Java is one of the most popular and widely used programming language and platform. A platform is an environment that helps to develop and run programs written in any programming language. </p> <p>    Java is fast, reliable and secure. From desktop to web applications, scientific supercomputers to gaming consoles, cell phones to the Internet, Java is used in every nook and corner.</p> <p>  <b>However to become proficient in any programming language, one Firstly needs to understand the basics of that language.</b> </p><p>   Therefore, below are the basics of Java in the format in which it will help you the most to get the headstart: </p> <ol>    <li>   <b>Java Environment</b>: The programming environment of Java consists of three components mainly:  <ul>   <li>       JDK   </li>   <li>   JRE   </li>   <li>   JVM   </li>   </ul> </li> <li>    <b>Java Basic Syntax</b>: Every programming language has its own set of rules to declare, define and work on its components. Reading and learning about all of them together is difficult. Therefore here is a simple task of printing “Hello World” in Java. During this process, major components and their syntaxes are explained clearly.  </li>  <li>    <b>Comments in Java</b>: In a program, comments take part in making the program become more human-readable by placing the detail of code involved and proper use of comments makes maintenance easier and finding bugs easily. Comments are ignored by the compiler while compiling the code. </li> <li>    <b>Data Types in Java</b>: Each variable in Java has an associated data type. Each data type requires different amounts of memory and has some specific operations which can be performed over it. </li>  <li>      <b>Variables in Java</b>: A variable is the name given to a memory location. It is the basic unit of storage in a program.  </li> <li>    <b>Keywords in Java</b>: Keywords or Reserved words are the words in a language that are used for some internal process or represent some predefined actions. These words are therefore not allowed to use as variable names or objects. Doing this will result in a compile-time error.  </li>   <li>    <b>Operators in Java</b>: Operators are the foundation of any programming language. Thus the functionality of Java programming language is incomplete without the use of operators. We can define operators as symbols that help us to perform specific mathematical and logical computations on operands. In other words, we can say that an operator operates the operands.    </li>   <li>    <b>Decision Making (Control Statements) in Java</b>: Decision Making in programming is similar to decision making in real life. In programming also we face some situations where we want a certain block of code to be executed when some condition is fulfilled.<br>    A programming language uses control statements to control the flow of execution of the program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program.    </li>  <li>    <b>Loops in Java</b>: Looping in programming languages is a feature which facilitates the execution of a set of instructions/functions repeatedly while some condition evaluates to true.<br>   Java provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.  </li> </ol></div>",
	"topics":[
			{
		"topic":"Constructor",
		"content":"<div><h2>    Constructors in Java</h2> <p>    Constructors are used to initialize the object’s state. Like methods, a constructor also contains collection of statements(i.e. instructions) that are executed at time of Object creation.</p> <h3>    Need of Constructor</h3> <p>    Think of a Box. If we talk about a box class then it will have some class variables (say length, breadth, and height). But when it comes to creating its object(i.e Box will now exist in computer’s memory), then can a box be there with no value defined for its dimensions. The answer is no.<br>So constructors are used to assign values to the class variables at the time of object creation, either explicitly done by the programmer or by Java itself (default constructor).</p><h3>    When is a Constructor called ?</h3> <p>    Each time an object is created using new() keyword at least one constructor (it could be default constructor) is invoked to assign initial values to the data members of the same class.  </p>  <p>      A constructor is invoked at the time of object or instance creation. For Example:  </p>  <pre>class Tech<br>{   <br> .......<br><br> // A Constructor<br> new Tech() {}<br><br> .......<br>}<br><br>// We can create an object of the above class<br>// using the below statement. This statement<br>// calls above constructor.<br>Tech obj = new Tech(); <br></pre><h3>  Rules for writing Constructor:</h3><ul><li>    Constructor(s) of a class must has same name as the class name in which it resides. </li><li>    A constructor in Java can not be abstract, final, static and Synchronized.</li> <li>    Access modifiers can be used in constructor declaration to control its access i.e which other class can call the constructor. </li></ul><h3> Types of constructor</h3><p>  There are two type of constructor in Java:</p><ol>  <li>   <b>No-argument constructor</b>: A constructor that has no parameter is known as default constructor. If we don’t define a constructor in a class, then compiler creates default constructor(with no arguments) for the class. And if we write a constructor with arguments or no-arguments then the compiler does not create a default constructor.<br>Default constructor provides the default values to the object like 0, null, etc. depending on the type.<div style=\"background-color: black;width: 60%;\"><code style=\"color:orangered;\"> // Java Program to illustrate calling a <br>// no-argument constructor <br>import java.io.*; <br><br>class Tech <br>{ <br>  int num; <br>  String name; <br><br>  // this would be invoked while an object<br>   // of that class is created. <br>  Tech() <br> {<br>     System.out.println(\"Constructor called\");<br>   } <br>} <br><br>class Techademics<br> { <br> public static void main (String[] args)<br>  { <br>    // this would invoke default constructor.<br>     Tech tech1 = new Tech(); <br><br>  // Default constructor provides the default<br>     // values to the object like 0, null <br>    System.out.println(tech1.name); <br>    System.out.println(tech1.num); <br> } <br>}<br> </code> </div>   </li><li>  <b>Parameterized Constructor</b>: A constructor that has parameters is known as parameterized constructor. If we want to initialize fields of the class with your own values, then use a parameterized constructor.  <div style=\"background-color: black;width: 60%;\"> <code style=\"color:orangered;\">    // Java Program to illustrate calling of <br>// parameterized constructor. <br>import java.io.*; <br><br>class Tech <br>{ <br> // data members of the class. <br>  String name; <br> int id; <br><br> // constructor would initialize data members<br>  // with the values of passed arguments while <br> // object of that class created. <br> Tech(String name, int id) <br> { <br>    this.name = name;<br>     this.id = id; <br> } <br>} <br><br>class Techademics <br>{ <br>  public static void main (String[] args) <br>  { <br>    // this would invoke the parameterized constructor.<br>     Tech tech1 = new Tech(\"adam\", 1); <br>    System.out.println(\"TechName :\" + tech1.name +    \" and TechId :\" + tech1.id);   } <br>} <br> </code></div></li></ol><h3>  Does constructor return any value?</h3><p>  There are no “return value” statements in constructor, but constructor returns current class instance. We can write ‘return’ inside a constructor.</p></div>"
	},
			{
		"topic":"String",
		"content":"<p>  Strings in Java are Objects that are backed internally by a char array. Since arrays are immutable(cannot grow), Strings are immutable as well. Whenever a change to a String is made, an entirely new String is created.</p><p> Below is the basic syntax for declaring a string in Java programming language.</p><h4> Syntax:</h4><pre> String str = \"Tech\";</pre><h3>  Memory allotment of String</h3><p>  Whenever a String Object is created, two objects will be created- one in the Heap Area and one in the String constant pool and the String object reference always points to heap area object.</p><h4> For Example:</h4><pre> String str = \"Tech\";</pre><h3> An Example that shows how to declare String</h3><div style=\"background-color: black;width: 60%;\"><code style=\"color:orangered;\"><br> // Java code to illustrate String <br><br>import java.io.*; <br>import java.lang.*; <br><br>class Test { <br> public static void main(String[] args) <br> { <br>  // Declare String without using new operator <br>  String s = \"Techademics\"; <br><br>   // Prints the String. <br>   System.out.println(\"String s = \" + s);<br><br>   // Declare String using new operator <br>  String s1 = new String(\"Techademics\");<br><br>  // Prints the String. <br>   System.out.println(\"String s1 = \" + s1); <br>  } <br>} <br></code></div><h3> Interfaces and Classes in Strings in Java</h3><ul> <li>  CharBuffer: This class implements the CharSequence interface. This class is used to allow character buffers to be used in place of CharSequences. An example of such usage is the regular-expression package java.util.regex. </li> <li>  String: String is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created. </li>  <li>   StringBuffer: StringBuffer is a peer class of String that provides much of the functionality of strings. String represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences. </li> <li>  StringBuilder: The StringBuilder in Java represents a mutable sequence of characters. Since the String Class in Java creates and immutable sequence of characters, the StringBuilder class provides an alternate to String Class, as it creates a mutable sequence of characters. </li> <li>   StringTokenizer: StringTokenizer class in Java is used to break a string into tokens.<br>A StringTokenizer object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.<br> A token is returned by taking a substring of the string that was used to create the StringTokenizer object. </li> <li>     StringJoiner: StringJoiner is a class in java.util package which is used to construct a sequence of characters(strings) separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. Though this can also be with the help of StringBuilder class to append delimiter after each string, StringJoiner provides an easy way to do that without much code to write. </li></ul>"
	},
	{
		"topic":"Arrays",
		"content":"<p> <h2>    Arrays in Java </h2> <p>    An array is a group of like-typed variables that are referred to by a common name.Arrays in Java work differently than they do in C/C++. Following are some important point about Java arrays. </p> <ul>    <li>In Java all arrays are dynamically allocated.</li>    <li>Since arrays are objects in Java, we can find their length using member length.</li>    <li>A Java array variable can also be declared like other variables with [] after the data type.</li>    <li>The variables in the array are ordered and each have an index beginning from 0.</li>    <li>Java array can be also be used as a static field, a local variable or a method parameter.</li>    <li>The size of an array must be specified by an int value and not long or short.    The direct superclass of an array type is Object.</li>       <li>Every array type implements the interfaces Cloneable and java.io.Serializable.</li> </ul> <p>    Array can contains primitives data types as well as objects of a class depending on the definition of array. In case of primitives data types, the actual values are stored in contiguous memory locations. In case of objects of a class, the actual objects are stored in heap segment. </p> <h3>      One-Dimensional Arrays :  </h3>  <p>    The general form of a one-dimensional array declaration is </p><pre>    type var-name[];<br>    OR<br>    type[] var-name; </pre> <p>    An array declaration has two components: the type and the name. type declares the element type of the array. The element type determines the data type of each element that comprises the array. Like array of int type, we can also create an array of other primitive data types like char, float, double..etc or user defined data type(objects of a class).Thus, the element type for the array determines what type of data the array will hold.  </p> <h3>      Example:  </h3> <div style=\"background-color: black;width: 60%;\"> <code style=\"color:orangered;\"><br>   // both are valid declarations<br>int intArray[]; <br>or int[] intArray; <br><br>byte byteArray[];<br>short shortsArray[];<br>boolean booleanArray[];<br>long longArray[];<br>float floatArray[];<br>double doubleArray[];<br>char charArray[];<br><br>// an array of references to objects of <br>// the class MyClass (a class created by<br>// user)<br>MyClass myClassArray[]; <br><br>Object[]  ao,        // array of Object<br>Collection[] ca;  // array of Collection<br>          // of unknown type<br> </code> </div> <p>   Although the above first declaration establishes the fact that intArray is an array variable, no array actually exists. It simply tells to the compiler that this(intArray) variable will hold an array of the integer type. To link intArray with an actual, physical array of integers, you must allocate one using new and assign it to intArray. </p> <h3>      Instantiating an Array in Java  </h3>  <p>     When an array is declared, only a reference of array is created. To actually create or give memory to array, you create an array like this:The general form of new as it applies to one-dimensional arrays appears as follows: </p> <pre>    var-name = new type [size]; </pre> <p>    Here, type specifies the type of data being allocated, size specifies the number of elements in the array, and var-name is the name of array variable that is linked to the array. That is, to use new to allocate an array, you must specify the type and number of elements to allocate. </p> <h3>     Example </h3><pre>    int intArray[];    //declaring array<br>    intArray = new int[20];  // allocating memory to array<br>    OR<br>   int[] intArray = new int[20]; // combining both statements in one<br></pre> <h3>   Note : </h3> <ol>    <li>    The elements in the array allocated by new will automatically be initialized to zero (for numeric types), false (for boolean), or null (for reference types).Refer Default array values in Java  </li>   <li>    Obtaining an array is a two-step process. First, you must declare a variable of the desired array type. Second, you must allocate the memory that will hold the array, using new, and assign it to the array variable. Thus, in Java all arrays are dynamically allocated.     </li> </ol>  <h2>     Array Literal  </h2>  <p>      In a situation, where the size of the array and variables of array are already known, array literals can be used.  </p> <pre>   int[] intArray = new int[]{ 1,2,3,4,5,6,7,8,9,10 }; <br>// Declaring array literal </pre> <ul>   <li>The length of this array determines the length of the created array.</li>  <li>There is no need to write the new int[] part in the latest versions of Java</li> </ul> <h2>   Accessing Java Array Elements using for Loop </h2> <p>    Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. All the elements of array can be accessed using Java for Loop. </p>  <pre>  // accessing the elements of the specified array<br>for (int i = 0; i < arr.length; i++)<br>System.out.println(\"Element at index \" + i +      \" : \"+ arr[i]);  </pre>  <h3>  Implementation :  </h3> <div style=\"background-color: black;width: 60%;\"> <code style=\"color:orangered;\">  // Java program to illustrate creating an array <br>// of integers,  puts some values in the array, <br>// and prints each value to standard output. <br><br>class Tech  <br>{ <br>  public static void main (String[] args)<br>    {          <br>  // declares an Array of integers.<br>  int[] arr; <br><br>      // allocating memory for 5 integers.<br>   arr = new int[5]; <br><br>    // initialize the first elements of the array<br>   arr[0] = 10; <br><br>    // initialize the second elements of the array<br>   arr[1] = 20; <br><br> //so on... <br>  arr[2] = 30; <br> arr[3] = 40; <br>arr[4] = 50; <br><br> // accessing the elements of the specified array<br>  for (int i = 0; i < arr.length; i++) <br> System.out.println(\"Element at index \" + i +  \" : \"+ arr[i]);  } <br>} <br></code></div><h2> Multidimensional Arrays</h2> <p>   Multidimensional arrays are arrays of arrays with each element of the array holding the reference of other array. These are also known as Jagged Arrays. A multidimensional array is created by appending one set of square brackets ([]) per dimension. Examples: </p><pre>int[][] intArray = new int[10][20]; //a 2D array or matrix<br>int[][][] intArray = new int[10][20][10]; //a 3D array </pre> <div style=\"background-color: black;width: 60%;\"> <code style=\"color:orangered;\">class multiDimensional <br>{<br>  public static void main(String args[]) <br>  { <br>  // declaring and initializing 2D array <br>   int arr[][] = { {2,7,9},{3,6,1},{7,4,2} }; <br><br> // printing 2D array <br> for (int i=0; i< 3 ; i++) <br>  { <br>  for (int j=0; j < 3 ; j++) <br>   System.out.print(arr[i][j] + \" \"); <br><br>  System.out.println(); <br>   } <br> } <br>} </code></div></p>"
	}
		]
}